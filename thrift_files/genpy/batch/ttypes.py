#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Unit(object):
    """
    Attributes:
     - CPUUtilization_Average
     - NetworkIn_Average
     - NetworkOut_Average
     - MemoryUtilization_Average
     - Final_Target

    """


    def __init__(self, CPUUtilization_Average=None, NetworkIn_Average=None, NetworkOut_Average=None, MemoryUtilization_Average=None, Final_Target=None,):
        self.CPUUtilization_Average = CPUUtilization_Average
        self.NetworkIn_Average = NetworkIn_Average
        self.NetworkOut_Average = NetworkOut_Average
        self.MemoryUtilization_Average = MemoryUtilization_Average
        self.Final_Target = Final_Target

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.CPUUtilization_Average = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.NetworkIn_Average = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.NetworkOut_Average = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.MemoryUtilization_Average = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.Final_Target = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Unit')
        if self.CPUUtilization_Average is not None:
            oprot.writeFieldBegin('CPUUtilization_Average', TType.DOUBLE, 1)
            oprot.writeDouble(self.CPUUtilization_Average)
            oprot.writeFieldEnd()
        if self.NetworkIn_Average is not None:
            oprot.writeFieldBegin('NetworkIn_Average', TType.DOUBLE, 2)
            oprot.writeDouble(self.NetworkIn_Average)
            oprot.writeFieldEnd()
        if self.NetworkOut_Average is not None:
            oprot.writeFieldBegin('NetworkOut_Average', TType.DOUBLE, 3)
            oprot.writeDouble(self.NetworkOut_Average)
            oprot.writeFieldEnd()
        if self.MemoryUtilization_Average is not None:
            oprot.writeFieldBegin('MemoryUtilization_Average', TType.DOUBLE, 4)
            oprot.writeDouble(self.MemoryUtilization_Average)
            oprot.writeFieldEnd()
        if self.Final_Target is not None:
            oprot.writeFieldBegin('Final_Target', TType.DOUBLE, 5)
            oprot.writeDouble(self.Final_Target)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Batch(object):
    """
    Attributes:
     - batch_id
     - units

    """


    def __init__(self, batch_id=None, units=[
    ],):
        self.batch_id = batch_id
        if units is self.thrift_spec[2][4]:
            units = [
            ]
        self.units = units

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.batch_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.units = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Unit()
                        _elem5.read(iprot)
                        self.units.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Batch')
        if self.batch_id is not None:
            oprot.writeFieldBegin('batch_id', TType.I32, 1)
            oprot.writeI32(self.batch_id)
            oprot.writeFieldEnd()
        if self.units is not None:
            oprot.writeFieldBegin('units', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.units))
            for iter6 in self.units:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerResponse(object):
    """
    Attributes:
     - RFWID
     - batches
     - last_batch_id

    """


    def __init__(self, RFWID=None, batches=[
    ], last_batch_id=None,):
        self.RFWID = RFWID
        if batches is self.thrift_spec[2][4]:
            batches = [
            ]
        self.batches = batches
        self.last_batch_id = last_batch_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.RFWID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.batches = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Batch()
                        _elem12.read(iprot)
                        self.batches.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.last_batch_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerResponse')
        if self.RFWID is not None:
            oprot.writeFieldBegin('RFWID', TType.STRING, 1)
            oprot.writeString(self.RFWID.encode('utf-8') if sys.version_info[0] == 2 else self.RFWID)
            oprot.writeFieldEnd()
        if self.batches is not None:
            oprot.writeFieldBegin('batches', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.batches))
            for iter13 in self.batches:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.last_batch_id is not None:
            oprot.writeFieldBegin('last_batch_id', TType.I32, 3)
            oprot.writeI32(self.last_batch_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientRequest(object):
    """
    Attributes:
     - RFWID
     - batch_id
     - batch_unit
     - batch_size
     - benchmark_type
     - dataset_type
     - cpu
     - net_in
     - net_out
     - mem
     - final

    """


    def __init__(self, RFWID=None, batch_id=None, batch_unit=None, batch_size=None, benchmark_type=None, dataset_type=None, cpu=None, net_in=None, net_out=None, mem=None, final=None,):
        self.RFWID = RFWID
        self.batch_id = batch_id
        self.batch_unit = batch_unit
        self.batch_size = batch_size
        self.benchmark_type = benchmark_type
        self.dataset_type = dataset_type
        self.cpu = cpu
        self.net_in = net_in
        self.net_out = net_out
        self.mem = mem
        self.final = final

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.RFWID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.batch_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.batch_unit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.batch_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.benchmark_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dataset_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.cpu = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.net_in = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.net_out = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.mem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.final = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientRequest')
        if self.RFWID is not None:
            oprot.writeFieldBegin('RFWID', TType.STRING, 1)
            oprot.writeString(self.RFWID.encode('utf-8') if sys.version_info[0] == 2 else self.RFWID)
            oprot.writeFieldEnd()
        if self.batch_id is not None:
            oprot.writeFieldBegin('batch_id', TType.I32, 2)
            oprot.writeI32(self.batch_id)
            oprot.writeFieldEnd()
        if self.batch_unit is not None:
            oprot.writeFieldBegin('batch_unit', TType.I32, 3)
            oprot.writeI32(self.batch_unit)
            oprot.writeFieldEnd()
        if self.batch_size is not None:
            oprot.writeFieldBegin('batch_size', TType.I32, 4)
            oprot.writeI32(self.batch_size)
            oprot.writeFieldEnd()
        if self.benchmark_type is not None:
            oprot.writeFieldBegin('benchmark_type', TType.STRING, 5)
            oprot.writeString(self.benchmark_type.encode('utf-8') if sys.version_info[0] == 2 else self.benchmark_type)
            oprot.writeFieldEnd()
        if self.dataset_type is not None:
            oprot.writeFieldBegin('dataset_type', TType.STRING, 6)
            oprot.writeString(self.dataset_type.encode('utf-8') if sys.version_info[0] == 2 else self.dataset_type)
            oprot.writeFieldEnd()
        if self.cpu is not None:
            oprot.writeFieldBegin('cpu', TType.STRING, 7)
            oprot.writeString(self.cpu.encode('utf-8') if sys.version_info[0] == 2 else self.cpu)
            oprot.writeFieldEnd()
        if self.net_in is not None:
            oprot.writeFieldBegin('net_in', TType.STRING, 8)
            oprot.writeString(self.net_in.encode('utf-8') if sys.version_info[0] == 2 else self.net_in)
            oprot.writeFieldEnd()
        if self.net_out is not None:
            oprot.writeFieldBegin('net_out', TType.STRING, 9)
            oprot.writeString(self.net_out.encode('utf-8') if sys.version_info[0] == 2 else self.net_out)
            oprot.writeFieldEnd()
        if self.mem is not None:
            oprot.writeFieldBegin('mem', TType.STRING, 10)
            oprot.writeString(self.mem.encode('utf-8') if sys.version_info[0] == 2 else self.mem)
            oprot.writeFieldEnd()
        if self.final is not None:
            oprot.writeFieldBegin('final', TType.STRING, 11)
            oprot.writeString(self.final.encode('utf-8') if sys.version_info[0] == 2 else self.final)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Unit)
Unit.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'CPUUtilization_Average', None, None, ),  # 1
    (2, TType.DOUBLE, 'NetworkIn_Average', None, None, ),  # 2
    (3, TType.DOUBLE, 'NetworkOut_Average', None, None, ),  # 3
    (4, TType.DOUBLE, 'MemoryUtilization_Average', None, None, ),  # 4
    (5, TType.DOUBLE, 'Final_Target', None, None, ),  # 5
)
all_structs.append(Batch)
Batch.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'batch_id', None, None, ),  # 1
    (2, TType.LIST, 'units', (TType.STRUCT, [Unit, None], False), [
    ], ),  # 2
)
all_structs.append(ServerResponse)
ServerResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'RFWID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'batches', (TType.STRUCT, [Batch, None], False), [
    ], ),  # 2
    (3, TType.I32, 'last_batch_id', None, None, ),  # 3
)
all_structs.append(ClientRequest)
ClientRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'RFWID', 'UTF8', None, ),  # 1
    (2, TType.I32, 'batch_id', None, None, ),  # 2
    (3, TType.I32, 'batch_unit', None, None, ),  # 3
    (4, TType.I32, 'batch_size', None, None, ),  # 4
    (5, TType.STRING, 'benchmark_type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dataset_type', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'cpu', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'net_in', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'net_out', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'mem', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'final', 'UTF8', None, ),  # 11
)
fix_spec(all_structs)
del all_structs
